---
author: David Carslaw
---

# Trend heat maps 趋势热图 {#sec-trendLevel}

## Another way of representing trends 

`trendLevel` 提供了一种以相对简洁的方式集中显示大量数据的方法，主要用于展示两个分类变量的级别水平变化。可以使用数据集中已经存在的分类变量参数，也可以在分析的过程中使用 [openair]{.pkg} 提供的工具即时生成。缺省状态下只用算是平均值在聚合数据，也可以设置为其它的统计指标，比如最大值、频率或者一个用户自己编写的函数。`trendLevel` 以热区图的形式灵活的展示时间序列数据，在颜色渲染方面既可以使用连续的渐变色，也可以为每一个类别定制的单独的颜色。

`trendLevel` 所描述的是一个参数（$z$）的值在另外两个参数（$x$ 和 $y$）的各种组合条件下的变化情况。其中 $x$ 和 $y$ 可以是可分类数据（因子factor型或字符character型）也可以是连续的数值numeric类型。$z$ 必须是数值型，这样才可以根据数值的大小渲染不同的颜色。尽管这个函数被称为“级别趋势”，但是它也可以用来展示除了污染物级别以外的很多不同指标。

当用于 $x$ 和 $y$ 的参数本身不可分类时，需要通过分位数（使用`cutData`）将数据进行拆分并因子化，拆分的百分位区间的个数可以通过 `n.levels` 参数定制。针对日期类型的`x` 或 `y`参数（见 @sec-cutData），函数内置了“月”（默认）、“周”，“白天”等多个选项。

## 示例 {#sec-TrendLevelEx}

@fig-trendLevel1 是 `trendLevel` 函数的标准输出。默认状态下，函数将 $x$ 轴显示为“月”，将 $y$ 轴显示为小时，因此这张图片展示了 NO~x~ 逐月的小时均值日变化情况。

```{r}
#| label: fig-trendLevel1
#| fig-cap: `trendLevel` 默认输出样例。
#| fig-width: 8
#| fig-height: 8
library(openair)
library(tidyverse)

trendLevel(mydata, pollutant = "nox")
```

```{r}
#| label: fig-trendLevel2
#| fig-cap: '`使用风向作为 `y`轴的 `trendLevel` 输出样例。'
#| fig-width: 8
#| fig-height: 8
trendLevel(mydata, pollutant = "nox", y = "wd", 
           border = "white", 
           cols = "turbo")
```

从 @fig-trendLevel3 可以看出，最高的NO~x~浓度出现在200度左右的西南风条件下，并且总体上呈逐年下降趋势，但是在富SO~2~条件下（右下角子图）有很大差异。我们也可以使用 `type = "so2"` 将 SO~2~ 的绝对浓度作为分类条件，但是富SO~2~条件的低贡献和贫SO~2~条件的高贡献这两种情形最终SO~2~的绝对浓度可能接近，被归在同一个类别下无法进行区分。所以我们通常会构建一个“跨污染物”的比值来作为分类条件，使得在这里例子中不管NO~x~的浓度是高还是低，我们都可以得到按照 SO~2~ 的相对浓度来区分的几个情形。

```{r}
#| label: fig-trendLevel3
#| fig-cap: '`使用SO~2~和NO~x~比值作为分类条件的 `trendLevel` 输出样例。'
#| fig-width: 8
#| fig-height: 8
#| out-width: 80%
## new field: so2/nox ratio
mydata <- mutate(mydata, ratio =  so2 / nox)

## condition by mydata$ratio
trendLevel(mydata, "nox", x = "year", y = "wd", 
           type = "ratio",
           cols = "inferno")
```

接下来给出了几个例子，展示几种灵活使用 `trendLevel` 函数的方法（只提供代码）：

分季节和白天夜间来绘制 O~3~ 平均浓度的热力图： 

```{r}
#| label: trendLevelex1
#| eval: false
trendLevel(mydata, x = "season", y = "daylight", pollutant = "o3")
```

或者分季节以及一天中的不同小时：

```{r}
#| label: trendLevelEx2
#| eval: false
    trendLevel(mydata, x = "season", y = "hour", 
               pollutant = "o3",
               cols = "increment")
```

想分析 O~3~ 浓度随 NO~x~ 和 NO~2~ 的变化情况？这种情形通常首先会想到 `scatterPlot`，但是使用 `trendLevel` 的一个最大的好处是它将所有的数据分割成样本数量相等的组来进行绘制，这样会使不同参数之间的关系看起来更清晰。相反，同样的数据使用散点图绘制时通常会出现大量样本集中在较小空间的情况，而个别的离群值还会带来图中大片的空白。从下面的图中可以清晰的看出，高浓度的 O~3~ 更多的出现在高 NO~2~ 条件下（以及NO~2~和NO~x~浓度水平都很低时）。

```{r}
#| label: fig-trendLevelNO2NOx
#| fig-cap: '使用 `trendLevel` 绘制的以 NO~x~ 和 NO~2~ 的不同浓度区间为条件的 O~3~ 浓度热力图。'
#| fig-width: 8
#| fig-height: 8
trendLevel(mydata, x = "nox", y = "no2", pollutant = "o3", 
           border = "white",
           n.levels = 30, statistic = "max", 
           limits = c(0, 50))
```

趋势热图还可以使用"wd"作为类型选项从而生成8个不同风向的面板。下面代码绘制的是不同风向、不同NO~x~分位数、一周中不同天的 O~3~ 浓度最大值情况。

```{r}
#| label: trendLevelEx4
#| eval: false
trendLevel(mydata, x = "nox", y = "weekday", pollutant = "o3",
           border = "white", n.levels = 10, statistic = "max",
           limits = c(0, 50), type = "wd")
```

`trendLevel` 按照用户指定的 `x`、 `y` 和 `type` 参数将 `pollutant` 数据分成多个小的样本集合，缺省状态下计算其算数平均值，但是可以使用 `statistic`  选项进行变更。在上面的代码中， `trendLevel` 就按照`statistic = "max"` 的设置来计算并显示最大值，这里也可以使用用户自己的统计计算函数。

在前面的例子中大多使用算数平均值对分区间聚合数据，这里我们给出一个通过建立自定义函数来使用特定百分位数作为数据聚合方法的示例，见@fig-trendlevel4 。

```{r}
#| label: fig-trendlevel4
#| fig-cap: '使用用户自定义函数作为`statistic`的`trendLevel`输出示例。'
#| fig-width: 8
#| fig-height: 8
#| out-width: 80%
## function to estimate 95th percentile
percentile <- function(x) quantile(x, probs = 0.95, na.rm = TRUE)

## apply to present plot
trendLevel(mydata, "nox", x = "year", y = "wd", 
           type = "ratio",
           cols = "viridis",
           statistic = percentile)
```

灵活的配置 `x`、 `y`、`type` 和 `statistic` 这四个分析维度使得 `trendLevel` 函数在理解多参数之间响应关系方面非常强大，这尤其适合在分析初期对大量数据特征规律的摸排阶段使用。通过 `trendLevel` 热力图找到的数据特征线索可以指引我们使用 [openair]{.pkg} 的其它工具进行进一步分析。例如我们隐约看到了污染物年际变化的趋势，那么接下来可以用 `smoothTrend` 或者 `TheilSen` 工具来证实和量化这个趋势；当我们发现污染物的变化可能对不同风场很敏感，那么接下来可以使用 `windRose` 或者 `polarPlot` 函数来进一步观察其细节。当然，要得到更有价值的分析和可视化结果还是需要分析者自身能够敢于尝试、不断拓展分析视角，通过引入新的输入参数和对比条件来发挥出 `trendLevel` 的最大潜能。

@fig-trendLevelDiscete 展示了如何在 `trendLevel` 中使用用户定制的色卡。在这个例子中 $x$ and $y$ 分别对应“周”和“小时”，以 `type`（年）分面板绘制。 

```{r}
#| label: fig-trendLevelDiscete
#| fig-cap: '使用用户自定义色卡绘制的 NO~2~ 最大值 `trendLevel` 热力图。'
#| fig-height: 8
#| fig-width: 8
trendLevel(mydata, pollutant = "no2",
           x = "week",
           border = "white",  statistic = "max",
           breaks = c(0, 50, 100, 500),
           labels = c("low", "medium", "high"),
           cols = c("forestgreen", "yellow", "red"),
           key.position = "top")
```

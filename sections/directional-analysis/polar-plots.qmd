---
author: David Carslaw
---

# 污染极坐标图 {#sec-polarPlot}

本章将讨论用于提供污染来源特征信息的 `polarPlot` 函数，以及基于极坐标图进行聚类分析的 `polarCluster`函数。

## 极坐标图简介

`polarPlot` 函数以*二元极坐标图*的形式绘制不同风速和风向条件下的污染物浓度。它在很多方面与 @sec-polarFreq 类似，但是有自己额外的增强功能，其中最主要的就是利用平滑建模将浓度展现为空间上一个连续的面。这个图并不是完全原创，前人已经做过污染物浓度和风速-风向的依赖性分析（例如[-@Yu2004]）。但是将这些数据绘制在极坐标系下用于定位污染物的来源是新的做法，而且我们又对基础的极坐标图做了多处改进和增强，后面会逐一介绍到。Carslaw 等 [-@Carslaw2006a] 和 Westmoreland 等 [-@Westmoreland2007]在他们的文章里介绍和使用了这一方法。事实证明，污染极坐标图是一种对定位潜在污染源非常有用的可视化方法。

`polarPlot`函数在 Carslaw 等人的文章中有更详细的描述[-@Carslaw2006a]。在该文章中，本函数被用于在机场环境中对污染源进行三角形扇区的定位；Carslaw 和 Beevers 的研究[-@CarslawClust2013] 中，将该函数与聚类技术结合，以识别污染极坐标图中的相似特征；Uria-Tellaetxe 和 Carslaw[-@Uria2014] 进一步引入条件概率函数，以从这些图中提取更多信息。

在大多数情况下，风速的增加通常会导致污染浓度的降低，这是由于气团平流和湍流的增加都会导致更强的稀释效应。然而，污染浓度和风速出现正相关的现象也经常发生，我们将在适当的时候提供更多的理论分析。以下是一些污染水平可能会随着风速增加而加重的原因。

-   高架源烟羽在大风条件下的传输，导致最终落地时出现高污染浓度。

-   在大风条件下可能出现扬尘污染导致颗粒物浓度上升，比如来自裸地的 PM~10~ 。

-   在沿海地区，大风导致的海雾也会对悬浮“颗粒物”形成重要贡献。

-   在街道窄谷中污染浓度和风速的关系非常复杂，高风速形成的谷内环流不一定会带来低浓度。二元污染极坐标图可以用来很好的揭示这其中的复杂性。

-   正如Carslaw等在 [-@Carslaw2006a] 中所示, 飞机的污染排放和风速的对应关系比较特殊，这正好可以帮助我们将它和机场地区其它的污染源区分开来。如果有多个站点的数据一起分析，那么可以同时看几个站点污染极坐标图，通过污染源出现的方向扇区更加准确的交叉验证污染源的位置。

-   NO~2~的浓度有可能会随着风速的增加而上升————至少不会因为气团的混合而急剧下降。因为这种混合有可能会导致O~3~浓度偏高的的空气将NO转化为NO~2~。

污染极坐标图允许使用风速以外的其它参数作为极轴变量来配合风向在极坐标系中显示污染物的浓度，来帮助理解各种不同的影响情景。例如：温度可以解释在不稳定大气条件下高架源或者其它与气温相关的污染排放对地面的影响，如生物源异戊二烯。已经有多个研究案例尝试使用风速以外的极轴变量用来区分不同的污染来源。

二元极坐标图的构建方式如下：首先，将风速、风向和浓度数据划分为小的“风速-风向”分段区间，并计算每个区间的平均浓度。通过我们对大量数据进行的测试结果表明，以5到10度的风向间隔和40个风速间隔来划分，能够捕获到浓度分布的足够细节。通常可获得的风向数据是以10度为单位的，适用于典型的地面气象监测。以上数据分组的方式并不是必须的，但是它可以作为一种有效的数据简化降维技术，同时不会影响绘图本身的准确性。此外，由于大气中风向固有的变化特性，通常需要使用数周、数月或数年的数据来构建二元极坐标图，这些数据往往是分散的，不会随着风向或风速的变化而急剧变化，更精细的分组大小或直接使用原始数据并不能提供更多信息。

风的分量，即 $u$ 的 $v$ 的计算如下：

$$
u = \overline{u} . sin\left(\frac{2\pi}{\theta}\right), v = \overline{u} . cos\left(\frac{2\pi}{\theta}\right) 
$$ {#eq-wind-comp}

其中， $\overline{u}$ 为小时平均风速，$\theta$ 为平均风向（以度为单位，90$^\circ$ 代表正东）。

以上的计算已经可以得到不同 $u$、$v$ 条件下的浓度($C$)场。虽然可以直接使用这个结果，但是更好的方法是建立一个模型将浓度描述为不同风分量 $u$ 和 $v$ 的函数，这样可以去除噪音得到更真实的污染源特征。广义加性模型（GAM）是一个可以用来做表面拟合的技术框架，例如 [@Hastie1990], [@Wood2006]。GAM同样用于空气质量的预测，因为通常变量之间的关系都是非线性的，而变量之间的相互作用更为重要，这两个问题都可以在GAM框架中得到处理。GAMs的表达式如 @eq-gam 所示：

$$
\sqrt{C_i} = \beta_0 + \sum_{j=1}^{n}s_j(x_{ij}) + e_i 
$$ {#eq-gam}

其中 $C_i$ 是第i个浓度值，$\beta_0$ 为响应结果的总体平均值，$s_j(x_{ij})$ 是针对预测变量 $j$ 的平滑函数，$n$ 为变量总数，$e_i$ 为 $i$ 的残差。注意这里 $C_i$ 采用了拟合效果整体较好的平方根变换，即正态分布残差。

公式 @eq-gam-2 为所选的同于浓度表面估算的模型。在这个模型中，浓度经平方根变换后作为风参数 $u$ 和 $v$ 的平滑函数。请注意，所使用的平滑函数是*各向同性*的，因为 $u$ 和 $v$ 处于相同的尺度上。各向同性平滑避免了在不同尺度上平滑两个变量（例如风速和风向）可能出现的问题，从而增加不必要的复杂性。

$$
\sqrt{C_i} = s(u, v) + e_i 
$$ {#eq-gam-2}

## 空气污染扩散角度理解极坐标图

在这一小节，我们使用扩散模型模拟单个污染物源的扩散，将模拟得到的小时浓度输出结果数据当做实际监测结果绘制污染极坐标图，来观察能够得到哪些与扩散有关的特征，这样做可以简化真实监测数据中需要考虑的污染源的数量和种类。

### 不同污染源类型的扩散效应 {#sec-effect-of-source}

作为不同污染扩散过程的示例，使用ADMS 5.2模型对以下两个不同的污染源进行模拟：低矮面（体）源和高架点源。面源设定为10米深度，覆盖面积50x50米，受体位于（0,0），污染源源位于（-500，-500）。这个污染源设定是城市中区域面源（如交通和家庭采暖）的一个简化示例。高架点源设定为高度60米，排放速率为10米/秒，排放温度为150°C。受体位于东北方向约1公里处（即污染源位于受体的西南方向）。模型气象输入采用2019年伦敦希思罗机场地面气象站的小时数据。

将两个场景设定下的模型逐小时输出结果进行处理后分别绘制污染极坐标图，如图 @fig-dispersion-ws 所示。低矮面源（@fig-volume-ws） 所呈现出的扩散特征为：高浓度出现在弱风速条件下（图中心的深色所示），风速越大浓度越低（远离图中心的区域）。这种特征在实际监测数据中经常出现，特别是在城市中心地区，因为这些地区存在大量地面的非抬升性的污染源。

相比之下，@fig-stack-ws 所示的高架点源则体现出与地表面源完全不同的扩散特征。图中可以很明显的看到污染源位于西南方向，但是对风速不敏感，甚至在很大风速下依然可以监测到较高浓度。这个特征是典型的在较高风速条件下高架点源落地造成污染的情况。@fig-stack-ws 所示的扩散模式具体取决于很多因素，如污染源的距离，污染源的性质（排放速率和出口温度等）以及大气环境本身的条件等，这将在下一小节中详细讨论。

::: {#fig-dispersion-ws layout-ncol="2"}
![低矮面源](../../assets/media/volume-ws.png){#fig-volume-ws}

![高架点源](../../assets/media/plume-ws.png){#fig-stack-ws}

不同污染源类型在各风速条件下的烟羽扩散效应。图中极角为风向，极轴为风速，风速从图中心的0增加到最远离中心的14m s^-1^。颜色的深浅为污染物的浓度。
:::

### 大气稳定度作为极轴变量

默认情况下，污染极坐标图使用风速作为极轴变量，但是也可以改成任何有助于识别污染源类型的其它变量。例如，如果一个污染源的排放强度与环境气温相关（如生物源异戊二烯排放），那么使用温度作为极轴变量则可以有效的突出这类源的特征。同样，相对湿度可以突出显示在高湿条件下与水汽凝结形成的悬浮颗粒物的污染。

从污染扩散的角度看，大气稳定度对烟羽如何扩散至关重要。早先，以级别区分的大气稳定度在扩散模型中广为应用，如Pasquill-Gifford稳定度，包括A到G的不同分级（A = 极不稳定，D = 中性，G = 极静稳）。然而，“现代”扩散模型，如ADMS和美国环保署的AERMOD模型，开始使用Monin-Obukhov长度（L~MO~）和边界层高度（H）来描述边界层内部扩散条件以及大气的稳定度。特别是H/L~MO~这一比值成为了可以代表大气稳定度的定量指标。@tbl-stability 中提供了H/L~MO~数值范围和大气稳定程度之间的对应关系。该数值划分有一定的主观成分，但是 @tbl-stability 给出的数据是常用的划分标准。

| Condition             | Range                |
|-----------------------|----------------------|
| Convective (unstable) | H/L~MO~ \< -0.6      |
| Neutral               | -0.6 \< H/L~MO~ \< 2 |
| Stable                | H/L~MO~ \> 2         |
|                       |                      |

: 使用Monin-Obukhov长度作为大气稳定度指标. {#tbl-stability}

通过 H/L~MO~ 得到大气稳定度的定量数值使得我们将大气稳定度作为极轴变量绘制污染极坐标图成为可能。不管是ADMS还是AERMOD模型都会通过一个气象前处理模块计算产生这些参数，其结果可以方便的应用于扩散模型以及与实际观测的对比分析当中。

[^polar-plots-1]: 例如，当运行ADMS模拟时会生成一个 .MOP 文件。这是一个简单的文本文件，可以读入R语言环境直接得到 L~MO~ 和 H 的结果以及对应时次的风速风向等实际观测数据。

不同的大气稳定度对烟羽扩散的影响可以在@fig-atmos-stability 中看到，该图展示了几个不同条件下模拟所得到的平均烟羽高度和扩散程度（σ~z~）。其中有几个重要特点：在静稳条件下，抬升后的烟羽可能不会在靠近排放源的地方到达地面；在稳定条件下烟羽的扩散要小得多；在大气不稳定（对流）条件下，烟羽在更接近污染源的的位置落地造成影响的可能性更大。正如前一节中讨论的那样，这些特征的实际变化取决于许多因素，但它们确实体现出一定规律。

![高度为60米的烟囱在不同大气稳定度下的烟羽扩散对比。深色线代表烟羽的平均高度，阴影区域代表平均的烟羽扩散 （σ~z~）](../../assets/media/stability_plume.png){#fig-atmos-stability}

和 @sec-effect-of-source 类似，我们可以通过污染极坐标图观察使用大气稳定度（H/L~MO~）作为极轴变量时两个场景的扩散特征。@fig-volume-stability 展示了模拟污染浓度在稳定度接近0（即中性条件）和正值（即稳定条件）下的变化。对于低矮面源来说，最高浓度很明显出现在大气静稳条件下，也就是 @fig-volume-ws 中低风速的情况。

相比之下，高架点源的扩散特征则与低矮面源完全不同（@fig-stack-stability）。 烟羽影响的范围与 @fig-stack-ws 相似，但是这里浓度高值出现在*不稳定*的大气条件下，也就是图中极轴变量H/L~MO~为负值时。这个结果表明大气的强对流会促进污染烟羽混合而影响地面，如图@fig-atmos-stability 所示。

::: {#fig-dispersion-monin layout-ncol="2"}
![低矮面源](../../assets/media/volume-stability.png){#fig-volume-stability}

![高架点源](../../assets/media/stack_stability.png){#fig-stack-stability}

使用大气稳定度作为极轴变量（H/L~MO~） 对比不同污染源类型的扩散效应，
:::

本节示例展示了如何解读污染极坐标图，还有许多其它污染源和污染情景等待我们去探索，在这个过程中通过真实数据理解和掌握扩散（或包含化学过程）规律是正确和有效使用这些分析方法的基础。

## 示例 {#sec-polar-plot-examples}

我们首先使用本函数最简单的形式来绘制 NO~x~ 的污染极坐标图。代码非常简短，运行结果如 @fig-polarPlot 所示。

先加载所需的包。

```{r}
#| cache: false
library(openair)
library(tidyverse)
```

```{r}
#| label: fig-polarPlot
#| fig-cap: 使用`polarPlot`函数的默认配置绘制的Marylebone交通站NO~x~污染极坐标图
#| fig-width: 5
#| fig-height: 4.5
#| out-width: 50%
polarPlot(mydata, pollutant = "nox")
```

@fig-polarPlot 中的单位是根据提供的原始数据中自动设置的。该图清晰的显示出西南风条件下 NO~x~ 污染水平最高。考虑到监测站点位于道路的*南*侧，在将来自道路污染物吹*走*的风向上反而出现浓度高值，这显然是街道窄谷环流在起作用。

@fig-polarPlot2 和 @fig-polarPlot3 使用不同的设置和污染物绘制污染极坐标图。其中第一张图 （@fig-polarPlot2） 使用了不同的配色方案并且调整了图例的位置。在 @fig-polarPlot3 中污染物替换成了 SO~2~,有意思的是在同一个站点SO~2~ 的浓度分布特征与 @fig-polarPlot2 和 @fig-polarPlot 完全不同。SO~2~浓度高值出现在偏东风条件下，这可能是伦敦市东部的工业区污染源造成的。然而，该图中仍然显示出一些与NO~x~类似的来自西南方向污染影响的迹象，这说明交通源对 SO~2~ 亦有贡献。

污染极坐标图很有可能在代表风速较高的区域显示出奇怪的特征，因为在这些条件下监测数据的样本可能非常有限，因此计算平滑浓度的不确定性会更大。有几种方法可以解决这个问题。首先，就是使用 `polarFreq`从而完全避免平滑浓度的计算。这种方法的问题在于很难确定如何最优的将风速和风向进行分段，分段的选择往往是随意的。其次，可以通过 `min.bin` 来设置在每个风速-风向分段中最小的监测样本数。在高风速条件下，一条数据可能会对平滑表面产生很大影响，通过设置 `min.bin = 3` 可以在拟合平滑表面*之前*删除所有风速-风向分段中样本数少于3的情况。这也是一个测试绘制拟合表面对可用样本数敏感性的有用策略，尽管仍然很难确定应该使用多少样本数作为最小的阈值。第三，设置 `uncertainty = TRUE`选项，设置后将显示拟合表面以及上下两个95%置信区间，置信区间考虑了测量的频率。增加不确定性应该是目前最稳健的方法，它避免了其他选项中的随意设置。平滑的程度与不确定性之间存在密切关系：平滑越多，拟合表面中的细节就越少，不确定性越低。反之亦然。

默认设置下，本函数会在拟合浓度表面时对样本数量较少的分段进行降权处理。对于样本数量为1、2和3个的分段，权重分别为0.25,、0.5和0.75。采用这种方法的优点是实际上不会弃用任何数据（不同于使用`min.bin`时发生的情况）。这种方法在大多数情况下应该是最稳健的，而且在 @sec-trajPlot 中使用后向轨迹来定位污染源时也使用了类似的方法。用户可以通过`weights = c(1, 1, 1)`选项来忽略自动加权。

```{r}
#| label: fig-polarPlot2
#| fig-cap: 使用`polarPlot`函数绘制的NO~x~ 污染极坐标图，示例中包含几个自定义设置。
#| fig-height: 5
#| fig-width: 5
#| out-width: 50%
## NOx plot
polarPlot(mydata, pollutant = "nox", col = "turbo", 
          key.position = "bottom",
          key.header = "mean nox (ug/m3)", 
          key.footer = NULL)
```

```{r}
#| label: fig-polarPlot3
#| fig-cap: 使用`polarPlot`函数绘制的SO~2~ 污染极坐标图
#| fig-height: 5
#| fig-width: 5
#| out-width: 50%
polarPlot(mydata, pollutant = "so2")
```

认识空气污染规律的一个非常有用的方法是观察两种污染物之间的比例，这一方面是因为污染物的比例变化在很大程度上去除了气象因素的影响，同时污染物比例关系也是判断污染来源的一个重要手段。首先，我们要生成这个污染物的比例，这在R中很容易实现。在下面的例子中，我们生成 SO~2~/NO~x~ 的比值：

```{r }
library(tidyverse)
mydata <- mutate(mydata, ratio = so2 / nox)
```

这将生成一个名为`ratio`的新变量。在计算比值的时候，当作为分母的监测数据为0的时候会出现问题。可以看到我们处理的数据就出现了这个问题，比值的均值和最大值都显示为无穷大（输出结果中的`Inf`）。好在R可以处理无限大，[openair]{.pkg} 中的函数会在进行计算时去除这些值，使得计算比值的过程进一步简化。

```{r }
summary(mydata$ratio)
```

SO~2~/NO~x~ 比值的污染极坐标图如 @fig-polarRatio 所示。在这张图中我们又发现了一些之前没有见到过的特征。首先，偏北方向存在更高的 SO~2~/NO~x~ 比值。其次，来自偏东方向的污染比来自西南方向污染的 SO~2~/NO~x~ 比值更高。因此通过SO~2~/NO~x~ 比值可以区分出东部的工业源和西南方向的交通源。这里只是一个非常简单初步的分析，利用污染物比值进行分析可以用在本书介绍的多数函数当中，在污染来源特别复杂的情形下尤其有用。

一个更好的方法也许是通过回归来计算比率（斜率），在 @sec-polar-pairwise 中会介绍。因为简单的将一个污染物的浓度除以另一个污染物的浓度会在很大程度上受到背景浓度的影响，而基于回归的方法则会避免这方面的问题。

```{r}
#| label: fig-polarRatio
#| fig-cap: Bivariate polar plot of the ratio of SO~2~/NO~x~.
#| fig-height: 5
#| fig-width: 5
#| out-width: 50%
polarPlot(mydata, pollutant = "ratio", main = "so2/nox ratio")
```

在使用比值作为研究对象时可能需要对数据做一些筛选，因为作为分母的那个污染物中的低值会导致比值出现极高值带来干扰。[dplyr]{.pkg} 包中的 `filter` 命令专门用于数据筛选的操作。下面代码演示如果筛选得到小于0.1的比值。

```{r}
#| eval: false
polarPlot(filter(mydata, ratio < 0.1), pollutant = "ratio")
```

前文已经提到可以通过 `uncertainty = TRUE` 选项来计算浓度拟合表面的不确定度，这里我们展示SO~2~浓度的示例（@fig-polarUncer）。 一般来说，在高风速条件下也就是图中靠近“边缘”的地带不确定度更高，因为这些条件下数据样本较少。不确定度的大小还取决于研究时间段内的站点的采样频率以及浓度变化的幅度。不确定度的特征不总是显而易见的，而且对于不同的污染物，不确定性可能会有很大的不同。

```{r}
#| label: fig-polarUncer
#| fig-cap: 'Marylebone交通点SO~2~的污染极坐标图。三张图分别为: 中心预测（中）和95%不确定度上限和下限。本例中可以看到，偏东方向和偏东南方向上的一些浓度结果不确定性较大。'
#| fig-width: 8
#| fig-height: 3.5
polarPlot(mydata, pollutant = "so2", uncertainty = TRUE)
```

`polarPlot` 函数同样可以引用另一个变量生成污染极坐标图的分列图（请参阅`type`选择）。例如，下面的代码将绘制Marylebone交通环境站点SO~2~浓度在一天当中每个小时的污染极坐标图，这里将每个风速/风向分段区间的最小样本数设置为2个。

```{r}
#| label: polarCondSO2
#| eval: false
polarPlot(mydata, pollutant = "so2", type = "hour", min.bin = 2)
```

该图显示SO~2~浓度在偏东风条件最高（正如@fig-polarPlot3 所示），并且高值主要出现在上午时段。按照时间进行区分后的污染极坐标图可以帮助我们回答污染来源的问题，比如，某一个污染源是不是只在工作日出现，或者只在冬季出现。在本例中，我们使用`type = "hour"`来观察污染的小时变化，所发现的上午时段的污染峰值可能是由于气象因素导致，这需要我们开展进一步调查。由于污染源的排放往往自带时间特征，`polarPlot` 函数配合时间参数可以帮助我们利用这个特征识别不同的污染源。

当我们通过不同的时间拆分数据并分别绘制污染极坐标图的时候需要考虑数据样本够不够，尤其是像上例中小时变化的例子，较短时间的数据可能不足以表现出规律性的特征。当然这也需要具体问题具体分析，比如短时间内风场条件是否具有普遍性或者这一小段时间是否就是我们感兴趣的研究时段。当我们一下子要生成很多图的时候（如 `type = "hour"`），运行时间可能会相当长。

## 基于风场条件的非参数回归（Nonparametric Wind Regression, NWR） {#sec-polar-NWR}

基于GAM拟合浓度表面的一个替代方案是使用核平滑。Henry等在[-@henry2009]中详细简绍了这种称为“NWR”的方法：即采用非参数的核平滑器根据风速风向分段区间的临近关系为预测浓度加权。[openair]{.pkg} 中最终使用针对风向和风速的高斯平滑器，与Henry等在[-@henry2009]中不完全一样。区别于[openair]{.pkg}中默认采用的GAM拟合方法，NWR平滑需要直接处理原始数据（通常为小时数据）。一般情况下两者的结果会比较接近，但是在比如数据样本较少的时候，NWR方法会有一定优势。高斯核(𝜎) 的宽度由`wd_spread` 和 `ws_spread`两个参数控制。

SO~2~ 浓度的NWR方法示例如图 @fig-polarNWR， 可以和 @fig-polarPlot3 进行比较。

```{r}
#| label: fig-polarNWR
#| fig-cap: '使用NRW方法绘制的Marylebone交通站SO~2~ 污染极坐标图'
#| fig-width: 5
#| fig-height: 5
#| out-width: 50%
polarPlot(mydata, pollutant = "so2", statistic = "nwr")
```

## 条件概率函数 (CPF) 极坐标图

在@sec-CPF 的 `percentileRose` 函数中我们提到了条件概率函数 (CPF)的绘制。CPF方法用于显示（指定的）高污染浓度在某一风向上出现的概率（Ashbaugh等[-@Ashbaugh1985]），这一方法也可以用于二元极坐标图。这里CPF的定义如下： CPF = $m_{\theta,j}/n_{\theta,j}$，其中 $m_{\theta,j}$ 为在风向段 $\theta$ 和风速区间 $j$ 中定义为“高”浓度的样本数，$n_{\theta, j}$ 为在同一风向和风向区间的总样本数。注意 $j$ 不一定是风速，也可以是其他的数值型变量，如气温。CPF用来分析带来重污染的主导风向，并给出概率值。Uria-Tellaetxe和Carslaw在[-@Uria2014]中给出了CPF方法的的详细解释，并将其用于钢铁厂附近的监测数据分析。 

```{r}
#| label: fig-polarPlotCPF
#| fig-cap: 'Marylebone交通站SO~2~ 污染CPF极坐标图'
#| fig-width: 5
#| fig-height: 5
#| out-width: 50%
polarPlot(mydata,
  pollutant = "so2",
  statistic = "cpf",
  percentile = 90
)
```

@fig-polarPlotCPF 是CPF极坐标图的一个示例，显示了SO~2~的90百分位浓度，出现高污染浓度概率高的地区很显然是在偏东风条件下。相比于“标准”的污染极坐标图@fig-polarPlot3 ，CPF极坐标图可以更清醒的揭示SO~2~的两个主要的潜在污染源。注意@fig-polarPlotCPF 在图底部给出了百分位的计算结果（本例中为9.2 ppb）。@fig-polarPlotCPF 也可以与基于风向的CPF污染玫瑰图@fig-percentileRoseCPF 进行对比。尽管从@fig-percentileRoseCPF 也可以看到偏东风贡献了最多的SO~2~高值，但是@fig-polarPlotCPF 由于同时考虑了风速，所以提供了更多的信息，让我得以进一步区分出来自偏东方向的两个（或两片）不同的污染源。

因此，CPF极坐标图在污染源源识别和表征方面非常有用。考虑不同的百分位水平和不同的污染物都有可能带来收获。例如，考虑SO~2~的95百分位可以“排除”掉高风速条件下的那个污染源，这有助于展示剩余污染源之间可能存在但是被忽略的重要差异。同样，结合多种污染物的结果可以帮助我们更好地理解污染源。例如，NO~2~的90百分位的CPF极坐标图显示了道路交通源的主导地位。然而，75百分位水平的CPF极坐标图则表明东部（可能是高架源）的污染贡献，这在标准的污染极坐标图中都不太明显。因此，考虑一系列百分位值可以帮助我们更全面地了解源的贡献。

```{r}
#| label: fig-polarPlotCPFInt
#| fig-cap: 'Marylebone交通站SO~2~ 污染CPF极坐标图。百分位区间分别为 0--10, 10--20, ... , 90--100。'
#| layout-ncol: 3
#| fig-width: 4.5
#| fig-height: 4
#| out-width: 100%
#| fig-show: hold
#| fig-subcap: 
#|   - "Percentile 0-10%."
#|   - "Percentile 10-20%."
#|   - "Percentile 20-30%."
#|   - "Percentile 30-40%."
#|   - "Percentile 40-50%."
#|   - "Percentile 50-60%."
#|   - "Percentile 60-70%."
#|   - "Percentile 70-80%."
#|   - "Percentile 80-90%."
#|   - "Percentile 90-100%."
polarPlot(mydata, poll = "so2", stati = "cpf", percentile = c(0, 10))
polarPlot(mydata, poll = "so2", stati = "cpf", percentile = c(10, 20))
polarPlot(mydata, poll = "so2", stati = "cpf", percentile = c(20, 30))
polarPlot(mydata, poll = "so2", stati = "cpf", percentile = c(30, 40))
polarPlot(mydata, poll = "so2", stati = "cpf", percentile = c(40, 50))
polarPlot(mydata, poll = "so2", stati = "cpf", percentile = c(50, 60))
polarPlot(mydata, poll = "so2", stati = "cpf", percentile = c(60, 70))
polarPlot(mydata, poll = "so2", stati = "cpf", percentile = c(70, 80))
polarPlot(mydata, poll = "so2", stati = "cpf", percentile = c(80, 90))
polarPlot(mydata, poll = "so2", stati = "cpf", percentile = c(90, 100))
```

将浓度的百分位数划分为较小的*区间*（例如50-60、60-70等）分别作图，可能会发现一些仅影响有限的百分位数范围的污染源，这对我们可能是有用的信息。`polarPlot`函数中的`percentile`选项可以通过两个数字进行范围赋值，例如`percentile = c(80, 90)`。在这种情况下，将考虑从较低百分位到较高百分位的浓度范围。例如，在@fig-polarPlotCPFInt 中，可以看出位于西南方向的道路交通源仅在60至90百分位之间凸显。而位于东部的高架烟囱对较高的百分位数（90至100）很重要。有趣的是在较低的百分位数区间中似乎出现了其他潜在的污染源，这些潜在污染源源在@fig-polarPlot3 中并不明显。另一个有趣的现象是特定的来源似乎倾向于只存在于特定的百分位范围内。如果这种特性在更广泛情况下也被证明是成立的，那么百分位区间可能是识别许多来源的有效方法。这些特定来源是否重要取决于分析的目的，很难确定在百分位范围为0到50的情况下显示的潜在污染源源是人为造成的。它们有可能是来自更远的点源，其烟羽在长距离输送过程中被稀释，这样的源在普通的污染极坐标图中被“掩盖”了。此方法的更详细示例，请参见Uria-Tellaetxe和Carslaw的 [-@Uria2014]。

很容易得到@fig-polarPlotCPFInt 中各百分位数所对应的浓度：

```{r}
#| label: quantInt
quantile(mydata$so2, probs = seq(0, 1, by = 0.1), na.rm = TRUE)
```

要在一页上绘制多张图，必须首先建立一个plot对象，然后再决定如果绘制和进行排版。请参见@sec-multiple-plots-page。

## Pairwise statistics 成对统计 {#sec-polar-pairwise}

Grange等[-@grange2016]通过允许使用成对统计量进一步拓展了 `polarPlot` 函数的功能。由于两种污染物的关系通常与污染源的构成相关，因此将两个污染物的关系作为研究对象，配合 `polarPlot` 函数结合使用，可以提供更多有用的信息。成对统计信息可以包括：

-   Pearson 或 Spearman 相关系数，$r$

-   由两种污染做线性回归产生的鲁棒斜率（梯度）

-   对两个变量进行分位数回归，分位数值为$tau$。默认情况下，使用中位数斜率（即$tau$ = 0.5），但用户可以自行设置。

-   York回归，用于解释 'x' 和 'y' 变量的误差

计算涉及到加权的Pearson相关系数，该系数以高斯模型来加权风向和径向变量（默认为风速），接近风速-风向分段的值拥有更多的权重。核加权用于确保所有的数据纳入计算，同时不依赖于某些风速-风向分段中可能很少的样本数。两个重要的设置是`ws_spread`和`wd_spread`，它们决定了在高斯核权重中使用的σ值，将这些值设置得过低会增加结果中的噪音。作为参考，`ws_spread`的合理值大约为最大风速的十分之一，`wd_spread`则在5-10°之间。

一个可能的应用场景是，为了评估钢铁厂对周边环境的影响，在附近设置站点进行一段时间大气中金属元素浓度的监测。尽管可以直接分析不同金属浓度之间的关系，但是如果将这种关系同时作为风速和风向的函数，将获得污染源贡献的更多信息。例如，铁（Fe）和锰（Mn）一般是强相关的，但是它们往往只在特定的风速和风向范围内最相关————表明来自一个特定的污染源。

作为示例，我们将分析牛津郡Harwell农村站点的 PM~2.5~ 和 PM~10~ 之间的关系。我们将使用附近站点的地面站气象数据，而不是 `importUKAQ`中提供的模式结果。

```{r}
#| label: importPolarData
library(worldmet) # to access met data
library(tidyverse) 

har <- importUKAQ("har", year = 2013)

# import met data from nearby site (Benson)
met <- importNOAA(code = "036580-99999", year = 2013)

# merge AQ and met but don't use modelled ws and wd
har <- inner_join(
  select(har, -ws, -wd, -air_temp),
  met,
  by = "date"
)
```

应用成对回归方法建立的PM~2.5~和PM~10~相关性极坐标图，如@fig-polarPair 所示。该图显示，在偏东风条件下，几乎全部的PM~10~ 浓度都是PM~2.5~，这主要是由硝酸铵为主的二次粒子贡献的。

如果简单的做PM~2.5~ 和PM~10~ 的散点图应该可以看到它们之间的比例接近1:1，但是无法知道PM~2.5~/PM~10~ 比值的高值来自偏东方向。 

```{r}
#| label: fig-polarPair
#| fig-cap: `polarPlot`函数绘制的2013年Harwell污染极坐标图，绘制对象为 PM~2.5~ 和 PM~10~ 线性回归的斜率，使用鲁棒斜率算法。
#| fig-width: 5
#| fig-height: 5
#| out-width: 60%
polarPlot(har,
  poll = c("pm2.5", "pm10"),
  statistic = "robust_slope",
  col = "turbo",
  limits = c(0, 1),
  ws_spread = 1.5,
  wd_spread = 10
)
```

下面需要对York回归的选项进行特别的说明。在普通的线性回归中，通常假设'x'变量没有误差。然而在大气科学中，通常是对两个都存在不确定性的变量进行回归分析。有不少方法可以一定程度上解决这个问题，如简化主轴（RMA）回归。然而，多年前多伦多大学的地球物理学家Derek York提出了这个问题的更通用解决方案[@york1968a；@york2004a][^polar-plots-2]。尽管York方法非常适合大气领域应用，但挑战在往往于监测环境本身的不确定性。正如 @wu2018 中所讨论的，如果其中一个变量的误差未知或测量误差不可信，York方法仍然可以很好地工作。在下面的示例中，为了说明的目的，已经估计并修复了误差，但在许多应用中，根据仪器的性能提供测量误差可能更为合适。

[^polar-plots-2]: 本文档是在York大学编写的，Derek也正巧出生在英国的York郡，让这里使用的York回归容易引发联想。遗憾的是Derek York如今已经离世，他为自己所从事的领域以及其他更多领域做出了巨大的贡献，他的工作成果留下了长期且重要的遗产.

```{r}
#| label: fig-polarPairYork
#| fig-cap:  `polarPlot`函数绘制的2013年Harwell污染极坐标图，绘制对象为 PM~2.5~ 和 PM~10~ 线性回归的斜率，使用York回归斜率
#| fig-width: 5
#| fig-height: 5
#| out-width: 60%

# assign simple / fixed uncertainties

har <- mutate(har, pm10_error = 2, pm2.5_error = 2)

polarPlot(har,
  poll = c("pm2.5", "pm10"),
  statistic = "york_slope",
  col = "turbo",
  limits = c(0, 1),
  ws_spread = 1.5,
  wd_spread = 10,
  x_error = "pm10_error", 
  y_error = "pm2.5_error"
)
```

## 比较两个时段 {#sec-polar-compare}

污染极坐标图用于表征不同污染源的存在，但是我们的关注点可能在于了解事物如何随时间变化。仅从时间序列数据中很难看到这些变化 ———— 特别是特定污染源的强度是否发生了变化。

`polarDiff` 函数专门用于比较两个时间段之间的污染极坐标图浓度表面，目的是强调是否有证据表明污染源强度已经发生改变。我们使用来自钢铁厂附近站点的数据（[Port Talbot](https://www.google.co.uk/maps/place/Tata+Steel+Port+Talbot/@51.5696918,-3.7659959,3447m/data=!3m1!1e3!4m5!3m4!1s0x486e6716f44ca7c3:0x9eec15ac83c4648c!8m2!3d51.5679565!4d-3.7594051)，以2012年和2019年两年的数据对比为例。首先，我们需要导入这两年的空气质量数据：

```{r}
#| label: import-PT4
port_talbot <- importUKAQ(site = "pt4", year = c(2012, 2019))

port_talbot
```

### 绝对浓度的差异对比

现在，我们来生成SO~2~两年的污染极坐标图的差值图（2019年减去2012年）。函数需要的三个主要参数是“之前”数据（'before'）、“之后”数据（'after'）以及污染物的名称。

```{r}
#| label: fig-polarDiff-SO2
#| fig.cap: 2012年至2019年Talbot港点位 SO~2~ 浓度差异图。
#| fig-width: 5
#| fig-height: 4.5
#| out-width: 60%
#| fig.keep: 'last'
polarDiff(before = selectByDate(port_talbot, year = 2012), 
          after = selectByDate(port_talbot, year = 2019), 
          pollutant = "so2")
```

@fig-polarDiff-SO2 非常清楚的显示出在西南方向上，有一个地区在2012年到2019年间SO~2~浓度大幅下降，这可能是由于钢铁厂采取了减排措施。但是如果我们看@fig-polarDiff-PM10 中相同时段的PM~10~结果，西西南方向的浓度反而有一个明显升高，这需要做进一步的研究。

```{r}
#| label: fig-polarDiff-PM10
#| fig.cap: 2012年至2019年Talbot港点位 PM~10~ 浓度差异图。
#| fig-width: 5
#| fig-height: 4.5
#| out-width: 60%
#| fig.keep: 'last'
polarDiff(before = selectByDate(port_talbot, year = 2012), 
          after = selectByDate(port_talbot, year = 2019), 
          pollutant = "pm10")
```

可以使用 @sec-selectByDate 中介绍的`selectByDate`函数来快速的选取特定时间段的监测数据用于这里的对比分析。例如，选取工作日的浓度、或者一年中的某些特殊时间段等等。所有时间段的选取都是为了关注污染最活跃的时间段来快速的“锁定”特定的污染源。

### 高浓度概率的差异对比

`polarDiff` 函数限于对比两个时间段的数据，它可以比较任何两个拟合后的浓度场（前提是两个数据集中的污染物是相同的）。例如，可以比较两个相邻站点的情况，或者两台并行的监测设备的差异。

当对比两个时间段之间的差异时，可以使用`statistic = "cpf"`选项来显示在两个时间段之间浓度超过一定概率的变化情况。这种方法@masiol2019 也已在后向轨迹研究中考虑过。需要注意一些细节以确保特定浓度超过的概率是否相同，因为（比如）一个时期的90百分位浓度和另一个时期可能是不同的。

以SO~2~为例，我们分析超过10μg m^-3^（接近2012年的第90个百分位数 —— 也可以使用空气质量标准限值）的概率以及随时间的变化情况。在本例中，百分位的选择涉及3个参数（`percentile = c(10, 100, -1)` ）。最后一个负数告诉`polarPlot` 前两个数字为绝对浓度————即SO~2~浓度大于10且小于100μg m^-3^。请注意，100μg m^-3^高于数据集中的最大浓度，这实际上意味着它提供了SO~2~浓度高于10 μg m^-3^的概率。因此，这里可以设置为大于数据中最大值的任何数字。

```{r}
#| label: fig-polarPlotCPFDiff
#| fig-cap: 2012年到2019年超过 10 μg m^-3^ 概率的变化
#| fig-width: 5
#| fig-height: 5
#| out-width: 60%
#| fig.keep: 'last'
polarDiff(before = selectByDate(port_talbot, year = 2012), 
          after = selectByDate(port_talbot, year = 2019), 
          pollutant = "so2", 
          statistic = "cpf", 
          percentile = c(10, 100, -1), 
          limits = c(-0.5, 0.5))
```

@fig-polarPlotCPFDiff 中可以看到，在2012年至2019年期间，当西南风时，浓度超过10 μg m^-3^ 可能性明显降低。

## 聚类 {#sec-polarCluster}

### Clustering concentrations 污染浓度聚类

`polarPlot` 函数通常会识别出一些有用的特征，可以通过看这些特征在污染极坐标图上的位置来选取部分数据进行下一步的分析。比如一段特定的风速和风向区间：

```{r}
#| label: selectPolar
#| eval: false
subdata <- filter(mydata, ws > 3, wd >= 180, wd <= 270)
```

这筛选出了`mydata`当中风速 \>3 m s^-1^同时风向介于180到270度之间的样本并另存为`subdata`，这个数据的子集可以用来做下一步的分析。这种方法在一些情况下是可以的，但是选取的过程还是比较随意的，事实上，它甚至可能受到你看到的污染极坐标图中色标的影响。另外很多时候，特征的范围不是简单的用几个变量的区间（如风速和风向）就可以划定的。

更好的方法是使用*聚类分析*的方法将相似的要素组合在一起。[openair]{.pkg} 使用k均值聚类法作为识别和分组二元极坐标图中要素的方法。以这种方式对浓度数据进行分组的主要目的是对原始时间序列数据中的记录进行分类，以便在后处理过程中更好地识别潜在的污染源特征。在k均值聚类分析中对数据进行分类的过程如下。首先，从计划聚类为 $k$ 组的数据中随机选取 $k$ 个点作为初始簇中心点。然后将每个数据点分配给距离这个点最近的簇中心所对应的簇中。分配所有对象后，将重新计算 $k$ 个簇中心点的位置。重复前两个步骤，直到簇中心不再显著变化。这将产生对象的聚类结果，从中可以计算出要最小化的度量。

聚类过程的核心思想是距离的概念，即对点与点之间相似性或相差性的度量。聚类的目标是使每一个簇内的数据点之间距离更短，而不同簇之间的距离更远。定义所使用的距离度量需要仔细考虑，因为聚类本身的性能从根本上取决于此。例如@fig-polarPlot 中浓度点之间的相似性由三个变量决定：$u$ 和 $v$ 两个风参数以及浓度值。这三个参数在表征浓度-位置信息方面同等重要，但是他们的度量单位不同。有 $X = \{x_i\}, i = 1,\ldots,n$ 是一组需要聚类为 $K$ 簇的 $n$ 个点，$C = \{c_k, k = 1,\ldots,K\}$。基本的k均值算法表达式如下：

$$
\sum_{k=1}^{K} \sum_{x_i \in c_k} || x_i - \mu_k ||^2 
$$ {#eq-clust-1}

其中 $|| x_i - \mu_k ||^2$ 是选定的距离度量，$\mu_k$ 是簇 $c_k$ 的平均值。

距离使用欧式距离（Euclidean distance）：

$$
d_{x, y} = \left({\sum_{j=1}^{J} (x_j - y_j) ^ 2}\right)^{1/2} 
$$ {#eq-clust-2}

其中 **x** and **y** 为两个J维向量，通过减去平均值并除以标准差进行了标准化。在本例中 $J$ 的长度为3，即描述风的 $u$ 和 $v$ 已经浓度 $C$， 每一个都进行了标准化:

$$
x_j = \left(\frac{x_j - \overline{x}}{\sigma_x}\right) 
$$ {#eq-clust-3}

标准化是必须的，因为风的参数 $u$ 和 $v$ 以及浓度的度量单位不同。原则上，可以增加浓度的权重而不是 $u$ 和 $v$ ，尽管这往往会聚类出浓度相似但来源不同的簇。

可以将 `polarCluster` 理解为后向轨迹聚类的“本地”版本。不是使用气团移动的轨迹，而是使用风速、风向和浓度将相似的条件分组在一起。@sec-trajCluster-trajectory-analysis 相信介绍了 [openair]{.pkg} 中后向轨迹聚类的详细信息。聚类方法的更全面描述请参见[@CarslawClust2013]。

`polarCluster`的使用与[openair]{.pkg} 中的其它函数类似。尽管有许多技术方法可用于尝试找到最佳的聚类簇数，但是很难有一个一致的方式能够识别二元极坐标图中的特征。因此，我们最好去尝试多个簇数寻找最合适的分类特征。

聚类分析是计算密集型的，函数 `polarCluster` 可能需要较长的时间才能运行完成。对极坐标图中拟合的浓度场进行聚类分析的基本思路是得到一套分类方案，然后选择其中最合适的方案开展下一步的分析。

下面给出的例子是对SO~2~浓度的聚类，如 @fig-polarPlot3 所示，目的是识别该污染极坐标如中的特征。对聚类簇数给出了一个范围————在本例中为2到10。

```{r}
#| label: fig-polarClust
#| fig.cap: 使用`polarCluster`函数对Marylebone路交通站SO~2~ 浓度进行聚类，簇数为2-10。
#| fig-width: 7
#| fig-height: 7
#| fig-keep: 'last'
polarCluster(mydata, pollutant="so2", n.clusters=2:10, cols= "Set2")
```

```{r}
#| label: fig-polarClustn6
#| fig-cap: 用`polarCluster`函数对Marylebone路交通站SO~2~ 浓度进行聚类，簇数为8.
#| fig-width: 5
#| fig-height: 5
#| out-width: 60%
#| fig-keep: 'last'
results <- polarCluster(mydata,
  pollutant = "so2",
  n.clusters = 8,
  cols = "Set2"
)
```

`polarCluster`真正的好处是可以为原始数据集加入聚类结果的标识。为此，需要将分析结果写入到新变量，如@fig-polarClustn6 所示，结果写入数据框`results`，接下来就可以使用这个新的数据集做下一步的分析了。在@fig-polarClustn6 的8簇聚类结果中，6号簇捕捉到了来自偏东方向上的SO~2~ 高值（可与 @fig-polarPlot3 进行比较），而4号簇则明显受到来自道路交通源的贡献。

数据结果如下：

```{r}
#| label: showClustResults
head(results[["data"]])
```

注意结果中增加了名为`cluster`的*字符型*列，数据为每一行所属的簇。将结果写入到新的数据框后再进行处理会更方便。

```{r }
results <- results[["data"]]
```

很容易得出每一个簇所属的数据点的个数：

```{r}
#| label: nResClust
table(results[["cluster"]])
```

现在可以使用 [openair]{.pkg} 中的其它分析函数来处理聚类后的数据了。例如，按照不同的簇绘制时间变化图：

```{r}
#| label: fig-tempEvalClust
#| fig-cap: 按照聚类结果绘制的 SO~2~ 时间变化图
#| fig-width: 9
#| fig-height: 7
timeVariation(results, pollutant = "so2", group = "cluster",
              key.columns = 4,
              col = "Set2", ci = FALSE, lwd = 3)
```

或者我们只想绘制其中的几个簇，并且使用和@fig-polarClustn6 中*相同的颜色*：

```{r}
#| label: fig-clustTV
#| fig-cap: 按照聚类结果绘制的 SO~2~ 时间变化图，只显示其中两个簇
#| fig-width: 9
#| fig-height: 7
timeVariation(
  dplyr::filter(results, cluster %in% c("C5", "C6")),
  pollutant = "so2",
  group = "cluster",
  col = openColours("Set2", 8)[5:6],
  lwd = 3
)
```

`polarCluster` 适用于任何 `polarPlot` 生成的浓度场，例如极轴变量不一定是风速，也可以是温度等其它变量。虽然 `polarCluster` 不一定总能完美的识别浓度场中的所有特征，但它肯定会使 `polarPlot` 的后期分析更加容易，不管是继续使用[openair]{.pkg} 还是其它分析手段。

理解聚类结果的另一种有用方法是使用 `timeProp` 函数，它可以将时间序列显示为由分类变量（在本例中为聚类结果）构成的堆叠条形图。绘制SO~2~的时间序列图*并*显示每个聚类贡献了多少浓度，如 @fig-timePropPolar 所示。现在很容易看出，SO~2~的许多峰值与簇6（来自东部的电厂污染源）有关。簇6在春季尤为突出，但这个污染源源在全年都有贡献。

```{r}
#| label: fig-timePropPolar
#| fig-cap: 2003年 SO~2~ 浓度的每日时间序列图，根据不同簇堆叠显示。
#| fig-width: 15
#| fig-height: 5
#| column: screen-inset-right
timeProp(
  selectByDate(results, year = 2003),
  pollutant = "so2",
  avg.time = "day",
  proportion = "cluster",
  col = "Set2",
  key.position = "top",
  key.columns = 8,
  date.breaks = 10,
  ylab = "so2 (ug/m3)"
)
```

### 浓度差异聚类 Clustering differences in concentrations

@sec-polar-compare 展示了如果对比两个污染极坐标图的差异，以便观察污染源强度随时间的变化。本节将对比不同的聚类分析结果。聚类的工作方式与前面介绍的相同，只是附件了一个参数（`after`）代表用于计算两个浓度场差值的第二个数据框。

调用函数的过程如 @fig-polarClust-diff 。注意我们将输出存入了`clust_out`中。 @fig-polarDiff-SO2 即对浓度场差值的聚类结果。

```{r}
#| label: fig-polarClust-diff
#| fig-cap: Talbot港点位2012年和2019年SO~2~极坐标浓度变化的聚类结果
#| fig-width: 5
#| fig-height: 4.5
#| fig-keep: 'last'
clust_out <- polarCluster(selectByDate(port_talbot, year = 2012),
  after = selectByDate(port_talbot, year = 2019),
  pollutant = "so2",
  n.clusters = 5
)
```

保存下来的 `clust_out` 很有用，因为它包含用于制作差值的两个原始数据集以及分配的聚类结果。这两个数据集可以以不同的方式组合和进行后处理。下面的代码中按聚类结果计算了平均浓度，可以看到3号簇与SO~2~浓度的*变化*最密切相关，可以考虑做进一步的分析。对浓度变化特征进行聚类可以更好地表征减排措施的效果，而不仅仅是考虑前后的绝对浓度。

```{r}
#| label: extract-clust-diff
clust_data <- bind_rows(clust_out$data, clust_out$after)

# consider mean SO2 by cluster
group_by(clust_data, cluster) %>% 
  summarise(mean_so2 = mean(so2, na.rm = TRUE))
```

## 交互式地图上的污染极坐标图

[openairmaps]{.pkg} R包可以用来在[leaflet]{.pkg}交互式地图上显示污染极坐标图以及其它的“定向型分析”可视化结果。这个包和 [openair]{.pkg} 一样可以通过CRAN下载安装。

```{r}
#| eval: false
install.packages("openairmaps")
```

`polarMap`函数除了常规输入参数以外，需要提供监测站点的基础信息（名称或者编码）和经纬度坐标。该软件包附带了一些样例数据（`polar_data`）可以作为模版套用在其它地方的数据上。此功能可以绘制*任何*类型的极坐标图，比如不同的`statistic`配置。

首先，我们加载软件包然后看一下数据的格式。

```{r}
#| cache: false
library(openairmaps)

glimpse(polar_data)
```

绘制交互式地图。

```{r}
#| label: fig-interMap
#| cache: false
#| fig-cap: 在交互式地图上绘制污染极坐标图，使用默认底图
#| column: screen-inset-shaded
#| results: asis
polarMap(
  polar_data,
  latitude = "lat",
  longitude = "lon",
  pollutant = "nox"
)
```

`polarMap` 函数接受各种对[leaflet]{.pkg} 地图的设置参数。例如，可以设置一种（或多种）不同的底图————真的有很多选择！你也可以一次要求绘制多种污染物，实现在几种污染物之间切换的功能。

```{r}
#| label: fig-interMap2
#| cache: false
#| fig-cap: 在交互式地图上绘制多种污染物的污染极坐标图，切换为另一种底图
#| column: screen-inset-shaded
polarMap(openairmaps::polar_data, 
         pollutant = c("nox", "no2"),
         latitude = "lat",
         longitude = "lon",
         provider = "CartoDB.Positron")
```

如果你是用`importUKAQ`函数获取空气质量监测数据，那么记得使用`meta = TRUE`选项，这会在返回的数据中自动加上经纬度等站点元数据。

[openairmaps]{.pkg} 不只有 `polarMap` ———— 几乎所有的“定向型分析”函数都有地图版本，包括与[openair]{.pkg}中一一对应的`annulusMap`、 `freqMap`、 `percentileMap`、 `polarMap`、 `pollroseMap`以及 `windroseMap`等。

有关使用[openairmaps]{.pkg} 软件包将极坐标图作为地图标记的详细信息，请参阅[Directional Analysis Maps Page](../maps/maps-polar.qmd)。
